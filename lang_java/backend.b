# This is the Java language backend for awib
# Please refer to the documentation in the full source code distribution
# of awib for additional details

% 23(0) *8 (code) 0 M m
-[-<++<+++++++<++++++++++<++++++<++++++++<+++++++++++++<+<++++++++++++<+
++<++++<+++++<+++++++++++<+++++++++>>>>>>>>>>>>>]<<<<<<++++++++++++++.++
++.+++.-.+++.++.<<<<++++.>>>>----------.---------.+++++++++++++++++++++.
<<+++++++++++++.>>>>++++.<<<<++++++++.++++++.>>>>.>+++.<<<<<-.++.>>-.-.<
<<<<<++++++.>>>>>>.--.-------------.----.<<---.>>>+++.<<+++.<----.++++.+
++.-.+++.++.<<.>>----------.>>.<<++++++++++++.>>.>>.<<++++++++.++++++.>>
.>++++++.<<<<<-.-.>>+.<<+.-.<<<<.>>>>.--.>>-----------.----.<<-----.>>>.
<<.<----.++++.+++.-.+++.++.<<.>>----------.>>.<<++++++++++++.>>.>>.<<+++
+++++.++++++.>>.>------.++++++.----------.<<<<<++.>>------------.++.<<--
------.++++.>>++++.++++++.-.>.<<..>++.<<+.>>--------------.++++++++++.--
-.------.<<<<.>>>>.+++++++++.-----------.<<--..<<.<<<+++.>>>>>>>+++++.<<
<<.>>++++++++.>.<<<....>>>>----.<<--.-----.>>+++.----------.++.<<<<.>>--
-----.>>>.<<.<<<....>>----.+++++.++++++.<<.>>----.>>>.<<.<<<....<<<+++++
++.>>>>>--.++.+++++.-.<<<<.>>>>.--.>>++++++++.----.<<-----.<<.>>----.>>>
.<<.<<<....<<----.>>>>++++++++++++.-.----.+++++.-.<<<<++++.>>>>.--.>>+++
+.----.<<-----.<<.>>++.>>>.<<..<<<....>>+.+++++.>>+.++++++++++.---.-----
-.<<<<.>>>>>>>---.<<<+++.>>------.>+++++++.<<<++++++++.++.<<.-.<<<<.>>>>
.--.>>-----------.----.<<-----.<<.>>----.>>>>++++.<<<<<<.<<----.>>>>++++
++++++++.-.----.+++++.-.<<<<++++.>>>>.--.>>++++.----.<<-----.<<.>>++.>>>
>---.<<<<<<.>>++++++++++++.>.<<<........>>>>++++++++++++.>++.<+.--------
-.<<----.<<.>>>>---.<<++.-----.>>+++.----------.>-------.-..--.++.<++.>+
+++++.<<.<<<........>>----.>>>++.>>>-.<<<--.<<.-.<++++.------------.+.++
++++++++.>>>>>>--.<<<<++++++++++++.>++.<.>--.<<+.-.<+.>>-.+.<<-.>>>>>>.<
<<<++++++.>++.<.>--.<<+.<<<....>>++++++++++.>..<<<....>>>>+.+++++.------
-------------.++++++++++.---.------.<<<<.>>-------.-------.------.>>+.<<
<<.>>+++++++++.+++.-------.<<.<+++++.+.>.>>+++++++++++++.>.<<<........>>
-------.>>++++.+.<<-.>>>>>>.<<<<----------.>>>>++.<<-.+.<.<<.<<<....>>++
++++++++.>..<<<....>>-------------.+++++.>>+++.++++++++++.---.------.<<<
<.>>--.+.>>--.<<.>>++++++++.------.<<<<.>>++.-------.------.>>+.<<<<.>>+
+++.>>---.<<----.+++++.<<<-.<.>>>>++++++.--.---------.+++++.-------.>>--
----.++.<<<<.>>>>++++.<<+++++++++++.>>++++++.<<+.>>>>.<<<<<<.>>++++++++.
>.-.>+++++++.---------.<<----.<<.<<<-------.>>>>>>>+.>>-.<<<<<<<<.>>>>++
.------.+.>>-.++++++++.>>>>--.<<<<----.+++++.>>>>--.<<<<<<<<<<.>>>>+++++
.------.+.>>---------.++++++++.>>>>++.<<<<++.<<+.-.<<<+.+++++.>>>--.+++.
>>-.>>.+.<.<<+.<<<....>>++++++++.>..<<<....>>>>++.++.---------.<<-------
.>>--------.<<--.>>++++.<<<<.>>++.-------.>>++++.-----.<<<<.>>+++.>>>>-.
+.<<<<<<.>>+++++++++.>.-.<-------.--.+++++++.<<.>>++.>+.-.<<<....>>>>+++
++.>>>>.<<<<+++++++++.-------------.----.+++.>>-.<<+++++++++.>>>>--.<<<<
+++.>>>>.+++++.<<+.<.<<+.-.<++.<<.>>>>-------------.--.<<---------.>>++.
+++++.<<<<.>>>>>>-.>.++++++.----------.<<<<<++++.>>-----.++.<<--------.+
+++.>>++++.++++++.-.<<<<.>>>>---------.>>+.<<<<<<.>>+++++++.++.>+.<<<...
.>>.>..<<<....>>>>+++++++++++.++.---------.<<-------.>>--------.<<--.>>+
+++.<<<<.>>++.-------.>>++++.-----.<<<<.>>++++++++.>>>>-.+.<<<<<<.>>++++
.>.-.<-------.--.+++++++.<<.>>++.>+.-.<<<....>>------------.<<<.>>>+++++
+++.-----.>>+++++.<<++.>>----.>>-.<<++++++++.<<<<<<++++++++.>>>>----.<<<
<++.>-----.>>>>>>.<<+.-.<+++++++++++++.<<.<<++++++.--.>>>>>>+++++++.<<<<
<<++.+++++.>>.<-.<<+++++++.++++++.>>>>>>>>>>.<<<++++.<<<<<<-----.++.++++
+++++++.++++.-----------.++++++.-.>>.<<---------.>+.>.>>--.++.>+.<<<....
>>.>..<<<....>>>>--------.++.---------.<<-------.<<<<----.>>>>--.>>----.
<<<<.>>++.-------.>>++++.-----.<<<<.<<--.>+++++++.>>>>>>>.+.<<<<<<.>>+++
+++++++++.>.
[<]>[[-]>]

% 23(0) *0 (code) 0 M m

++++++++++++++++[-<++++++++++++++++>]<-[-<<<<<+<+>>>>>>]>

% 16(0) 0 255 255 0 0 0 0 0 *0 (code) 0 M m

>[<+>
% ::: (stack) 0 c d 0 0 0 0 0 1 *P i (code) 0 M m
% (where c and d form a 16 bit counter)

# stack segment in turn is multiple adjacent (C D 0 1 :: 1 0) where C
# and D are copies of previous 16 bit counters and the 1 sled exists
# for ease of traversal
-[-[-[-[-[-[-[-[-[-[-[-[[-]

<[
# RMUL2
% ::: (stack) 0 c d 0 0 0 0 0 *1 0 i (code) 0 M m
+++++[->+++++++++++++++<]>+++.-[--<+>]<---.-[-->+++<]>--.------[-<++>]<-.-
-----------------.+[---->+++++<]>---.+++[-----<++++>]<+.-[-->+<]>----.[-]
<<<+<<+>>>>
% ::: (stack) 0 c d 0 1 0 1 0 *0 0 i (code) 0 M m
]>]

<[
# RMUL1
% ::: (stack) 0 c d 0 0 0 0 0 *1 0 i (code) 0 M m
++++++++.---[->++++++++++++++++++<]>+.------------------.+[----<+++++>]<---.
--[----->++<]>-.[-]<<<+>>
% ::: (stack) 0 c d 0 0 0 1 0 *0 0 i (code) 0 M m
]>]

<[
# LMUL2
% ::: (stack) 0 c d 0 0 0 0 0 *1 0 i (code) 0 M m
+++++[->+++++++++++++++<]>+++.-[--<+>]<---.-[-->+++<]>--.------[-<++>]<-.-
-----------------.+[---->+++++<]>---.+++[-----<++++>]<+.-[-->+<]>----.[-]
<<<+<<+>>>>
% ::: (stack) 0 c d 0 1 0 1 0 *0 0 i (code) 0 M m
]>]

<[
# LMUL1
% ::: (stack) 0 c d 0 0 0 0 0 *1 0 i (code) 0 M m
++++++++.---[->++++++++++++++++++<]>+.------------------.+[----<+++++>]<---.
--[----->++<]>+.[-]<
<<+>>
% ::: (stack) 0 c d 0 0 0 1 0 *0 0 i (code) 0 M m
]>]

<[
# SET
% ::: (stack) 0 c d 0 0 0 0 0 *1 0 i (code) 0 M m
++++++++.---[->++++++++++++++++++<]>+.------------------.+[----<+++++>]<---.
+++[----->++++<]>+.[---<++>]<-.[-]<<+<<+>>>>
% ::: (stack) 0 c d 0 1 0 1 0 *0 0 i (code) 0 M m
]>]

<[-
# CLOSE
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.[-]
++++++++++.[-]
]>]

<[-
# OPEN
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.[-]
++++++++++.[-]
]>]

<[
# RIGHT
% ::: (stack) 0 c d 0 0 0 0 0 *1 0 i (code) 0 M m
++++++++.---[->+++++++++++++++++++<]>--.--[-----<++>]<-.-[-->+++<]>--.[-]<
<<+<<+>>>>
% ::: (stack) 0 c d 0 1 0 1 0 *0 0 i (code) 0 M m
]>]

<[
# LEFT
% ::: (stack) 0 c d 0 0 0 0 0 *1 0 i (code) 0 M m
++++++++.---[->+++++++++++++++++++<]>--.--[-----<++>]<+.[--->++++<]>+.[-]<
<<+<<+>>>>
% ::: (stack) 0 c d 0 1 0 1 0 *0 0 i (code) 0 M m
]>]

<[
# OUTPUT
% ::: (stack) 0 c d 0 0 0 0 0 *1 0 i (code) 0 M m
++++++++.---[->++++++++++++++++++++<]>-.+[---<+>]<.+.[-]
<<<<+>>>>
% ::: (stack) 0 c d 0 1 0 0 0 *0 0 i (code) 0 M m
]>]

<[
# SUB
% ::: (stack) 0 c d 0 0 0 0 0 *1 0 i (code) 0 M m
++++++++.---[->++++++++++++++++++<]>+.------------------.+[----<+++++>]<---.
+++[----->++++<]>+.-[--<+>]<-.[--->++++<]>+.[-]<
<<+<<+>>>>
% ::: (stack) 0 c d 0 1 0 1 0 *0 0 i (code) 0 M m
]>]

<[
# INPUT
% ::: (stack) 0 c d 0 0 0 0 0 *1 0 i (code) 0 M m
++++++++.---[->+++++++++++++++++++<]>.[---<+>]<++.+.[-]
<<<<+>>>>
% ::: (stack) 0 c d 0 1 0 0 0 *0 0 i (code) 0 M m
]>]

<[
# ADD
% ::: (stack) 0 c d 0 0 0 0 0 *1 0 i (code) 0 M m
++++++++.---[->++++++++++++++++++<]>+.------------------.+[----<+++++>]<---.
+++[----->++++<]>+.-[--<+>]<---.-[-->+++<]>--.[-]<
<<+<<+>>>>
% ::: (stack) 0 c d 0 1 0 1 0 *0 0 i (code) 0 M m
]

% ::: b 0 a 0 *0 0 i (code) 0 M m   (where a==1 iff i should be output
%                                          b==1 iff ';\n' should be output)

% 16(0) 0 255 255 0 b 0 a 0 *0 0 i (code) 0 M m


<<[->>
% ::: b 0 0 0 *0 0 i (code) 0 M m
++++++++++>>[-<<-<+>[<-]<[<]>[->++++++++++>+<<]>>>]++++++++++<<[->>-<<]
<++++++++++>>[-<<-<+>[<-]<[<]>[->++++++++++>+<<]>>>]++++++++++<<[->>-<<]
<++++++[->++++++++<]>>[<[->+>+<<]>.[-]>.[-]<]
>[<<[->>+<<]>>.[-]]<<[-]>>++++++[->++++++++<]>.[-]
<<<<]

% 16(0) 0 255 255 0 b 0 *0 0 0 0 i (code) 0 M m

<<[+++++[->++++++++++<]>-.[-]++++++++++.[-]<]>>>>>>
% ::: 0 0 0 0 0 0 *i (code) 0 M m

[-]>]

% ::: 0 0 0 *0 M m

# footer
>[-]>[-]
++++++++++++++++++++[->+++++++>+++>+>++++>++>++++++>+++++<<<<<<<]+++++++
++.>>>>+++.>>+.------.+.>+.<-------.<++++++.>++.++++++.-.<.>>+.++++++.<+
.--.>----.<<------.+.<<<-.<<+.-.>---------------.<+.>.<.
[[-]>]

% ::: 0 0 *0 0 0
